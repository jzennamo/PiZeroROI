////////////////////////////////////////////////////////////////////////
// Class:       PiZeroFilter
// Module Type: filter
// File:        PiZeroFilter_module.cc
//
// Generated at Tue Mar  1 14:26:33 2016 by Matthew Toups using artmod
// from cetpkgsupport v1_10_01.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDFilter.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

#include <memory>

#include "art/Framework/Services/Optional/TFileService.h"

#include "PiZeroROI/PiZeroROI.hh"
#include "RecoBase/Vertex.h"

class PiZeroFilter;

class PiZeroFilter : public art::EDFilter {
public:
  explicit PiZeroFilter(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  PiZeroFilter(PiZeroFilter const &) = delete;
  PiZeroFilter(PiZeroFilter &&) = delete;
  PiZeroFilter & operator = (PiZeroFilter const &) = delete;
  PiZeroFilter & operator = (PiZeroFilter &&) = delete;

  // Required functions.
  bool filter(art::Event & e) override;

  // Selected optional functions.
  void reconfigure(fhicl::ParameterSet const & p) override;

private:

  // Declare member data here.
  std::string fVertexModuleLabel;
  TTree* fmytree;
  int fnVtx;
};


PiZeroFilter::PiZeroFilter(fhicl::ParameterSet const & p)
  : fnVtx(0)
// Initialize member data here.
{
  this->reconfigure(p);
  art::ServiceHandle<art::TFileService> tfs;
  fmytree = tfs->make<TTree>("mytree","mytree");
  fmytree->Branch("nVtx",fnVtx,"nVtx/I");

  // Call appropriate produces<>() functions here.
  produces< std::vector<ana::PiZeroROI > >();
}

bool PiZeroFilter::filter(art::Event & e)
{
  // Implementation of required member function here.
  std::unique_ptr< std::vector< ana::PiZeroROI > > pizeroroiVector( new std::vector<ana::PiZeroROI> );
  //std::unique_ptr< art::Assns<recob::Vertex, ana::PiZeroROI::PiZeroROI > >  assnPiZeroROITagVertex( new art::Assns<recob::Vertex, anab::PiZeroROI>);

  art::Handle<std::vector<recob::Vertex> > Vtx_h;
  e.getByLabel( fVertexModuleLabel, Vtx_h );

  if(!Vtx_h.isValid()) throw std::exception();
  std::vector<recob::Vertex> const& VtxVector(*Vtx_h);
  
  fnVtx = 0;
  for(auto const Vtx : VtxVector) {
    std::vector<std::pair<int, int> > WireTimePairs;
    for(int i = 0; i<3; ++i) {
      WireTimePairs.emplace_back(i,Vtx.ID());
    }
    ana::PiZeroROI pizeroroi;
    pizeroroi.SetVertex( WireTimePairs );
    pizeroroiVector->emplace_back(pizeroroi);
    ++fnVtx;
  }
  fmytree->Fill();
  
  //util::CreateAssn(*this, e, *pizeroroiVector, vtx, *assnPiZeroROITagVertex);

  e.put( std::move(pizeroroiVector) );
  if(pizeroroiVector->size() > 0)
    return true;

  return false;
  //e.put( std::move(assnPiZeroROITagVertex) );
}

void PiZeroFilter::reconfigure(fhicl::ParameterSet const & p)
{
  fVertexModuleLabel = p.get<std::string>("VertexModuleLabel");
  // Implementation of optional member function here.
}

DEFINE_ART_MODULE(PiZeroFilter)
